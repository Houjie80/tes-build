name: Unpack IMG (MediaFire + multi-format support)

on:
  workflow_dispatch:
    inputs:
      mediafire_url:
        description: "URL file (.img.gz / .img.xz / .img.7z) di MediaFire"
        required: true
        default: "https://www.mediafire.com/file/xxxxxx/firmware.img.xz/file"
      output_name:
        description: "Nama prefix hasil ekstraksi"
        required: false
        default: "openwrt"
      release_tag:
        description: "Tag release untuk upload hasil"
        required: false
        default: "unpack-auto"

jobs:
  unpack:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # dibutuhkan untuk upload ke Release

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl xz-utils p7zip-full kpartx util-linux mount parted zip jq

      - name: Resolve MediaFire direct link
        id: resolve
        run: |
          echo "üîç Resolving MediaFire link..."
          URL="${{ inputs.mediafire_url }}"
          DIRECT=$(curl -sL "$URL" | grep -oE 'https://download[^"]+' | head -n1)
          if [ -z "$DIRECT" ]; then
            echo "‚ùå Tidak bisa mendapatkan direct link dari MediaFire"
            exit 1
          fi
          echo "‚úÖ Direct link: $DIRECT"
          echo "direct_url=$DIRECT" >> $GITHUB_OUTPUT

      - name: Download compressed image
        run: |
          echo "üîΩ Downloading image..."
          curl -L -o "firmware.img.download" "${{ steps.resolve.outputs.direct_url }}"
          echo "üì¶ File hasil unduhan:"
          ls -lh

          # Tentukan nama dan format file
          EXT=$(file firmware.img.download | grep -Eo 'XZ|gzip|7-zip' | head -n1 | tr 'A-Z' 'a-z')
          case "$EXT" in
            xz) mv firmware.img.download "${{ inputs.output_name }}.img.xz" ;;
            gzip) mv firmware.img.download "${{ inputs.output_name }}.img.gz" ;;
            7-zip) mv firmware.img.download "${{ inputs.output_name }}.img.7z" ;;
            *) echo "‚ùå Format tidak dikenali ($EXT)"; exit 1 ;;
          esac

      - name: Extract image (.gz / .xz / .7z)
        run: |
          FILE=$(ls *.img.* | head -n1)
          echo "üì¶ Extracting $FILE..."
          case "$FILE" in
            *.gz) gunzip -v "$FILE" ;;
            *.xz) xz -d -v "$FILE" ;;
            *.7z) 7z x "$FILE" ;;
            *) echo "‚ùå Format tidak dikenali."; exit 1 ;;
          esac
          ls -lh

      - name: Split image into boot and rootfs
        run: |
          set -e
          IMG=$(ls *.img | head -n1)
          mkdir -p boot rootfs mnt

          echo "üß© Setting up loop device..."
          LOOP=$(sudo losetup --show -Pf "$IMG")
          echo "Using loop device: $LOOP"

          echo "üîç Listing partitions..."
          sudo fdisk -l "$LOOP" || true

          # --- Partisi 1: boot ---
          if sudo mount "${LOOP}p1" mnt 2>/dev/null; then
            if [ -d mnt/boot ]; then
              cp -a mnt/boot/* boot/ || true
            else
              cp -a mnt/* boot/ || true
            fi
            sudo umount mnt
          else
            echo "‚ö†Ô∏è Tidak ada partisi boot (p1)"
          fi

          # --- Partisi 2: rootfs ---
          if sudo mount "${LOOP}p2" mnt 2>/dev/null; then
            cp -a mnt/* rootfs/ || true
            sudo umount mnt
          else
            echo "‚ö†Ô∏è Tidak ada partisi rootfs (p2)"
          fi

          sudo losetup -d "$LOOP"
          echo "‚úÖ Extraction done."
          du -sh boot rootfs || true

      - name: Compress boot and rootfs
        run: |
          echo "üóúÔ∏è Compressing extracted folders..."
          zip -r "${{ inputs.output_name }}_boot.zip" boot
          zip -r "${{ inputs.output_name }}_rootfs.zip" rootfs
          ls -lh *.zip

      - name: Upload as artifact
        uses: actions/upload-artifact@v4
        with:
          name: unpacked-${{ inputs.output_name }}
          path: |
            ${{ inputs.output_name }}_boot.zip
            ${{ inputs.output_name }}_rootfs.zip

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.release_tag }}
          files: |
            ${{ inputs.output_name }}_boot.zip
            ${{ inputs.output_name }}_rootfs.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
