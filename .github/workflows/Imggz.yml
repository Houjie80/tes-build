name: Unpack IMG.GZ (MediaFire support)

on:
  workflow_dispatch:
    inputs:
      mediafire_url:
        description: "URL file .img.gz di MediaFire"
        required: true
        default: "https://www.mediafire.com/file/xxxxxx/firmware.img.gz/file"
      output_name:
        description: "Nama prefix hasil ekstraksi"
        required: false
        default: "openwrt"
      release_tag:
        description: "Tag release untuk upload hasil"
        required: false
        default: "unpack-mediafire"

jobs:
  unpack:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # diperlukan untuk upload ke release

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl p7zip-full kpartx losetup mount parted zip jq

      - name: Resolve MediaFire direct link
        id: resolve
        run: |
          echo "🔍 Resolving MediaFire link..."
          URL="${{ inputs.mediafire_url }}"
          # Ambil URL download langsung dari halaman HTML
          DIRECT=$(curl -sL "$URL" | grep -oE 'https://download[^"]+')
          if [ -z "$DIRECT" ]; then
            echo "❌ Tidak bisa mendapatkan direct link dari MediaFire"
            exit 1
          fi
          echo "✅ Direct link: $DIRECT"
          echo "direct_url=$DIRECT" >> $GITHUB_OUTPUT

      - name: Download .img.gz
        run: |
          echo "🔽 Downloading from MediaFire..."
          curl -L -o "${{ inputs.output_name }}.img.gz" "${{ steps.resolve.outputs.direct_url }}"
          ls -lh "${{ inputs.output_name }}.img.gz"

      - name: Extract .img.gz
        run: |
          echo "📦 Extracting..."
          gunzip -v "${{ inputs.output_name }}.img.gz"
          ls -lh

      - name: Split image into boot and rootfs
        run: |
          set -e
          IMG="${{ inputs.output_name }}.img"
          mkdir -p boot rootfs mnt

          echo "🧩 Setting up loop device..."
          LOOP=$(sudo losetup --show -Pf "$IMG")
          echo "Using loop device: $LOOP"

          echo "🔍 Listing partitions..."
          sudo fdisk -l "$LOOP" || true

          echo "📂 Mounting partitions..."
          # Boot
          sudo mount "${LOOP}p1" mnt || true
          if [ -d mnt/boot ]; then
            cp -a mnt/boot/* boot/ || true
          else
            cp -a mnt/* boot/ || true
          fi
          sudo umount mnt || true

          # Rootfs
          sudo mount "${LOOP}p2" mnt || true
          cp -a mnt/* rootfs/ || true
          sudo umount mnt

          echo "🧹 Cleaning up..."
          sudo losetup -d "$LOOP"

      - name: Compress boot and rootfs
        run: |
          echo "🗜️ Compressing extracted folders..."
          zip -r "${{ inputs.output_name }}_boot.zip" boot
          zip -r "${{ inputs.output_name }}_rootfs.zip" rootfs
          ls -lh *.zip

      - name: Upload as artifact
        uses: actions/upload-artifact@v4
        with:
          name: unpacked-${{ inputs.output_name }}
          path: |
            ${{ inputs.output_name }}_boot.zip
            ${{ inputs.output_name }}_rootfs.zip

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.release_tag }}
          files: |
            ${{ inputs.output_name }}_boot.zip
            ${{ inputs.output_name }}_rootfs.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
